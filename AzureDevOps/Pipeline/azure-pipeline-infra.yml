trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - AzureDevOps/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: secrer-santa-secretsanta-f4465ce8-e6e6-4c46-b979-67aea42c5fb1

  - name: terraformVersion
    value: '1.6.0'
  - name: terraformWorkingDirectory
    value: 'AzureDevOps/Infrastructure/azure-vm'
  - name: runDestroy
    value: 'true'  # Set to 'true' to enable destroy step

stages:
- stage: Deploy_VM
  jobs:
  - job: Terraform
    steps:

    # 📦 Install Terraform CLI
    - script: |
        echo "⬇️ Installing Terraform v$(terraformVersion)..."
        curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform -version
      displayName: '📦 Install Terraform CLI'

    # 🔧 Terraform Init using Service Principal
    - script: |
        echo "📁 Initializing Terraform with Service Principal..."
        terraform init
      workingDirectory: $(terraformWorkingDirectory)
      displayName: '🔧 Terraform Init (Service Principal Auth)'
      env:
        ARM_CLIENT_ID: $(client_id)
        ARM_CLIENT_SECRET: $(client_secret)
        ARM_SUBSCRIPTION_ID: $(subscription_id)
        ARM_TENANT_ID: $(tenant_id)

    # ✅ Validate Terraform
    - script: |
        echo "🔍 Validating Terraform..."
        terraform validate
      workingDirectory: $(terraformWorkingDirectory)
      displayName: '✅ Terraform Validate'

    # 📝 Terraform Plan
    - script: |
        echo "🧠 Running Terraform Plan..."
        terraform plan \
          -var "subscription_id=$(subscription_id)" \
          -var "client_id=$(client_id)" \
          -var "client_secret=$(client_secret)" \
          -var "tenant_id=$(tenant_id)" \
          -var "admin_password=$(admin_password)" \
          -var-file="terraform.tfvars" \
          -out=tfplan.out
      workingDirectory: $(terraformWorkingDirectory)
      displayName: '📝 Terraform Plan'
      env:
        ARM_CLIENT_ID: $(client_id)
        ARM_CLIENT_SECRET: $(client_secret)
        ARM_SUBSCRIPTION_ID: $(subscription_id)
        ARM_TENANT_ID: $(tenant_id)

    # 🚀 Terraform Apply
    - script: |
        echo "🚀 Applying Terraform Changes..."
        terraform apply -auto-approve tfplan.out
      workingDirectory: $(terraformWorkingDirectory)
      displayName: '🚀 Terraform Apply'
      env:
        ARM_CLIENT_ID: $(client_id)
        ARM_CLIENT_SECRET: $(client_secret)
        ARM_SUBSCRIPTION_ID: $(subscription_id)
        ARM_TENANT_ID: $(tenant_id)

    # 🧹 Terraform Destroy (conditionally)
    - script: |
        echo "🧹 Destroying Terraform Infrastructure..."
        terraform destroy -auto-approve \
          -var "subscription_id=$(subscription_id)" \
          -var "client_id=$(client_id)" \
          -var "client_secret=$(client_secret)" \
          -var "tenant_id=$(tenant_id)" \
          -var "admin_password=$(admin_password)" \
          -var-file="terraform.tfvars"
      workingDirectory: $(terraformWorkingDirectory)
      displayName: '🧹 Terraform Destroy'
      condition: eq(variables['runDestroy'], 'true')
      env:
        ARM_CLIENT_ID: $(client_id)
        ARM_CLIENT_SECRET: $(client_secret)
        ARM_SUBSCRIPTION_ID: $(subscription_id)
        ARM_TENANT_ID: $(tenant_id)